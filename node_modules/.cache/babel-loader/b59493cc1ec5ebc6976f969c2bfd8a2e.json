{"ast":null,"code":"var fs = require(\"fs\");\n\nvar Module = require(\"module\");\n\nvar moduleStack = [];\nvar defaultCompile = module.constructor.prototype._compile;\n\nmodule.constructor.prototype._compile = function (content, filename) {\n  moduleStack.push(this);\n\n  try {\n    return defaultCompile.call(this, content, filename);\n  } finally {\n    moduleStack.pop();\n  }\n};\n\nglobal.define = function (id, deps, factory) {\n  // Allow for anonymous modules\n  if (typeof id !== \"string\") {\n    factory = deps;\n    deps = id;\n    id = null;\n  } // This module may not have dependencies\n\n\n  if (deps && !Array.isArray(deps)) {\n    factory = deps;\n    deps = null;\n  }\n\n  if (!deps) {\n    deps = [\"require\", \"exports\", \"module\"];\n  } // infer the module\n\n\n  var currentModule = moduleStack[moduleStack.length - 1];\n  var mod = currentModule || module.parent || require.main;\n\n  if (typeof id === \"string\" && id !== mod.id) {\n    throw new Error(\"Can not assign module to a different id than the current file\");\n  }\n\n  var req = function (module, relativeId, callback) {\n    if (Array.isArray(relativeId)) {\n      // async require\n      return callback.apply(this, relativeId.map(req));\n    }\n\n    var chunks = relativeId.split(\"!\");\n    var prefix;\n\n    if (chunks.length >= 2) {\n      prefix = chunks[0];\n      relativeId = chunks.slice(1).join(\"!\");\n    }\n\n    var fileName = Module._resolveFilename(relativeId, module);\n\n    if (Array.isArray(fileName)) fileName = fileName[0];\n\n    if (prefix && prefix.indexOf(\"text\") !== -1) {\n      return fs.readFileSync(fileName, \"utf8\");\n    } else return require(fileName);\n  }.bind(this, mod);\n\n  id = mod.id;\n\n  if (typeof factory !== \"function\") {\n    // we can just provide a plain object\n    return mod.exports = factory;\n  }\n\n  var returned = factory.apply(mod.exports, deps.map(function (injection) {\n    switch (injection) {\n      // check for CommonJS injection variables\n      case \"require\":\n        return req;\n\n      case \"exports\":\n        return mod.exports;\n\n      case \"module\":\n        return mod;\n\n      default:\n        // a module dependency\n        return req(injection);\n    }\n  }));\n\n  if (returned) {\n    // since AMD encapsulates a function/callback, it can allow the factory to return the exports.\n    mod.exports = returned;\n  }\n};","map":{"version":3,"sources":["/Users/zoe/Documents/Development/porfolio-options/definition-portfolio/portfolio/node_modules/amd-loader/amd-loader.js"],"names":["fs","require","Module","moduleStack","defaultCompile","module","constructor","prototype","_compile","content","filename","push","call","pop","global","define","id","deps","factory","Array","isArray","currentModule","length","mod","parent","main","Error","req","relativeId","callback","apply","map","chunks","split","prefix","slice","join","fileName","_resolveFilename","indexOf","readFileSync","bind","exports","returned","injection"],"mappings":"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","sourcesContent":["var fs = require(\"fs\");\nvar Module = require(\"module\");\n\nvar moduleStack = [];\nvar defaultCompile = module.constructor.prototype._compile;\n\nmodule.constructor.prototype._compile = function(content, filename){  \n    moduleStack.push(this);\n    try {        \n        return defaultCompile.call(this, content, filename);\n    }\n    finally {\n        moduleStack.pop();\n    }\n};\n\nglobal.define = function (id, deps, factory) {\n    // Allow for anonymous modules\n    if (typeof id !== \"string\") {\n        factory = deps;\n        deps = id;\n        id = null;\n    }\n    // This module may not have dependencies\n    if (deps && !Array.isArray(deps)) {\n        factory = deps;\n        deps = null;\n    }\n    if (!deps) {\n        deps = [\"require\", \"exports\", \"module\"];\n    }\n\n    // infer the module\n    var currentModule = moduleStack[moduleStack.length-1];\n    var mod = currentModule || module.parent || require.main;\n\n\n    if (typeof id === \"string\" && id !== mod.id) {\n        throw new Error(\"Can not assign module to a different id than the current file\");\n    }\n\n    var req = function(module, relativeId, callback) {\n        if (Array.isArray(relativeId)) {\n            // async require\n            return callback.apply(this, relativeId.map(req))\n        }\n        \n        var chunks = relativeId.split(\"!\");\n        var prefix;\n        if (chunks.length >= 2) {\n            prefix = chunks[0];\n            relativeId = chunks.slice(1).join(\"!\");\n        }\n        \n        var fileName = Module._resolveFilename(relativeId, module);\n        if (Array.isArray(fileName))\n            fileName = fileName[0];\n        \n        if (prefix && prefix.indexOf(\"text\") !== -1) {\n            return fs.readFileSync(fileName, \"utf8\");\n        } else\n            return require(fileName);\n    }.bind(this, mod);\n    \n    id = mod.id;\n    if (typeof factory !== \"function\") {\n        // we can just provide a plain object\n        return mod.exports = factory;\n    }\n    \n    var returned = factory.apply(mod.exports, deps.map(function (injection) {\n        switch (injection) {\n            // check for CommonJS injection variables\n            case \"require\": return req;\n            case \"exports\": return mod.exports;\n            case \"module\": return mod;\n            default:\n                // a module dependency\n                return req(injection);\n        }\n    }));\n    \n    if (returned) {\n        // since AMD encapsulates a function/callback, it can allow the factory to return the exports.\n        mod.exports = returned;\n    }\n};"]},"metadata":{},"sourceType":"script"}